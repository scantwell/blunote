/**
* BluNote Application Messages
* This file describes all communication messages being sent to and from devices on a BluNote server.
*/
package blunote;

option java_package = "com.drexelsp.blunote.blunote";
option java_outer_classname = "BlunoteMessages";


/**
* Message that represents a song that can be played
*/
message Song {
	optional string album = 1; /// The id for the album
	optional string artist = 2; /// The id for the artist
	optional string duration = 3; /// The duration of the audio file, in ms
	required int64 song_id = 4; /// The id for the song in the owners MediaStore
	required string title = 5; /// Song title
	required string track = 6; /// The track number of this song on the album, if any.
	optional string year = 7; /// The year the audio file was recorded, if any
}

/**
* Message that represents an album of an artist
*/
message Album {
	required string album = 1; /// The album on which the audio file appears, if any
	optional bytes album_art = 2; /// Cached album art.
	optional string artist = 3; /// Name of the artist
	optional string first_year = 4; /// The year in which the earliest songs on this album were released.
	optional string last_year = 5; /// The year in which the latest songs on this album were released.
	optional string number_of_songs = 6; /// The number of songs on this album
}

/**
* Message that represents an artist
*/
message Artist {
	required string artist = 1; /// Name of the artist
	required string number_of_albums = 2; /// The number of albums in the database for this artist
	required string number_of_tracks = 3; /// The number of albums in the database for this artist
}

/**
* Message used to add or remove artists, albums, and songs from the available song list
*/
message MetadataUpdate {
	enum Action { ADD = 1; REMOVE = 2;} ///Whether the metadata should be added or removed from a list

	required Action action = 1; /// To add or remove the songs from the database
	repeated Album albums = 2; /// A list of albums to update
	repeated Artist artists = 3; /// A list of artists to update
	required string owner = 4; /// The user that can supply the song data
	repeated Song songs = 5; /// A list of songs to update
}

/**
*
*/
message Vote {
	enum AnswerType {  SINGLE = 1; MULTI = 2; RANKED = 3;} /// Single allows only one answer, Multi allows an unlimited amount, Ranked allows the user to rank each option
	enum DisplayType { ALPHA = 1; NUMERICAL = 2; } /// Whether to display the options enumerated by numbers or alphabetically

	required int32 voteId = 1;               /// Unique vote ID
	required AnswerType response_type = 2;   /// Type of vote and expected response type
	required string question = 3;            /// The question to be displayed
	repeated string options = 4;             /// Options to be displayed
	required DisplayType display_type = 5;   /// Determines how to display the options to the user
}

/**
* Answer to a vote type of SINGLE
* This vote type only allows for one answer
*/
message SingleAnswer {
	required int32 voteId = 1;  /// Unique vote ID of the vote message from the sender
	required string choice = 2; /// single selection choice
}

/**
* Answer to a vote type of MULTI or RANKED
* This vote type allows for at most n choices where n is the total number of choices in the vote.
*/
message MultiAnswer {
	required int32 voteId = 1;    /// Unique vote ID of the vote message from the sender
	repeated string choices = 2;  /// One or more choices from the vote
}

/**
* Recommendation message
* This message is used to recommend an artist, album, song, or genre to be played in the future
*/
message Recommendation {
	enum Type {  ARTIST = 1; ALBUM = 2; SONG = 3;}
	required string username = 1;
	required Type type = 2;
	optional Artist artist = 3;
	optional Album album = 4;
	optional Song song = 5;
}

/**
* Request for song data to be sent from a user defined by username field
*/
message SongRequest {
	required string username = 1; /// Unique user name of the song holder
	required int64 songId = 2;   /// ID of the song that is in the username (owners) database
}

/**
* Slice of a song that is being sent from a user to the host.
* These are sent after a SongRequest message has been received
*/
message SongFragment {
	required int64 songId = 1;     /// Song ID defined in the host database
	required bytes fragment = 3;   /// Bytes of the song
	required int64 fragmentId = 4; /// Number of the fragment in the sequence, between 1 and totalFragments
	required int32 totalFragments = 5;  /// Total number of fragments to be expected
}

/**
* Used to send any BluNote message
*/
message WrapperMessage {

	enum Type { METADATA_UPDATE = 1; MULTI_ANSWER = 2; RECOMMEND = 3; SINGLE_ANSWER= 4; SONG_FRAGMENT = 5; SONG_REQUEST = 6; VOTE = 7;}

	required Type type = 1;
	optional MetadataUpdate metadataUpdate = 2;
	optional MultiAnswer multiAnswer = 3;
	optional Recommendation recommendation = 4;
	optional SingleAnswer singleAnswer = 5;
	optional SongFragment songFragment = 6;
	optional SongRequest songRequest = 7;
	optional Vote vote = 8;
}

/**
* Stores metadata about the message being sent
*/
message DeliveryInfo {
	required int64 timestamp = 1;
	optional string username = 2;
	optional int32 id = 3;
}

/**
* Used to couple the WrapperMessage and DeliveryInfo
*/
message Pdu {
	required DeliveryInfo deliveryInfo = 1;
	required WrapperMessage message = 2;
}

message DataFragment {
	required bytes data = 1;
	required int64 fragmentId = 2;
	required int64 totalFragments = 3;
}